#!/bin/bash
#
# Script to create a version bump commit.
#
# Increases the version
#
# Semantic Versioning: MAJOR.MINOR.PATCH

. 'scripts/inc.functions.sh'

if [[ $# -ne 1 ]] ; then
    die "Usage: $0 [VERSION_NAME]\n\n\tExample: $0 0.0.1"
fi


function get_version_name {
    echo $(grep "versionName = \"" $1 | cut -d"\"" -f2)
}

function get_version_code {
    echo $(grep "versionCode " $1 | cut -d" " -f11) # VERY FLAKY!
}


LIBRARY_GRADLE="versioninfo/build.gradle.kts"
MOBILE_GRADLE="app/build.gradle.kts"

# Increase version name
OLD_VERSION_NAME=$(get_version_name ${LIBRARY_GRADLE})
NEW_VERSION_NAME=$1
if [[ "$NEW_VERSION_NAME" < "$OLD_VERSION_NAME" || \
     "$NEW_VERSION_NAME" = "$OLD_VERSION_NAME" ]] ; then
    die "Error: We are already at version $OLD_VERSION_NAME"
fi
sed -i -e "s|versionName = \"$OLD_VERSION_NAME|versionName = \"$NEW_VERSION_NAME|" \
    ${LIBRARY_GRADLE} ${MOBILE_GRADLE}

# Bump mobile app version code for Google's Play Store
for gradle in ${MOBILE_GRADLE} ; do
    OLD_VERSION_CODE=$(get_version_code ${gradle})
    NEW_VERSION_CODE=$(($OLD_VERSION_CODE+1))
    sed -i -e "s/versionCode = $OLD_VERSION_CODE/versionCode = $NEW_VERSION_CODE/" \
        ${gradle}
done


# Create a commit with appropriate tag
git commit \
    ${LIBRARY_GRADLE} \
    ${MOBILE_GRADLE} \
    -m "Bump to version $NEW_VERSION_NAME"
git tag release/${NEW_VERSION_NAME}
