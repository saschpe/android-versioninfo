#!/bin/bash
#
# Script to create a release commit.
#
# Increases the version name and version code of an Android app,
# commits and tags the result.
#
# Based of semantic versioning: MAJOR.MINOR.PATCH

SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
. "${SCRIPT_DIR}/inc.functions.sh"

# Constants
FILES=(
  app/build.gradle.kts
  versioninfo/build.gradle.kts
)

# Functions
usage() {
  echo -e "Usage: $0 [VERSION_NAME]\n\n  Example: $0 0.0.1"
  exit 1
}

version_gt() {
  test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"
}

get_version_code() {
    grep "versionCode = " "$1" | cut -d"=" -f2 | xargs
}

get_version_name() {
  grep "versionName = " "$1" | cut -d"=" -f2 | xargs
}

# Checks
if [[ $# -ne 1 ]]; then
  usage
fi

# Increase version name
version_name_new=$1
# Split new version name into major, minor, patch and pad each number to two
# digits to ensure we can safely switch from 1.9.0 to 1.10.0. Padded, the
# latter would yield '011000' as the new version code. The result has a length
# of six digits.
IFS='.' read -r -a version_name_new_array <<<"${version_name_new}"

version_name_old=$(get_version_name "${FILES[0]}")

for file in ${FILES[@]}; do
  # To be able to compare with the previous version, do the same for the old
  # version name.
  IFS='.' read -r -a version_name_old_array <<<"${version_name_old}"

  if version_gt "${version_name_old}" "${version_name_new}"; then
    die "Already at version ${version_name_old}"
  fi

  # Since we're otherwise fine, start changing the version name
  sed2 "s|${version_name_old}|${version_name_new}|g" "${file}"

  # Increment app version code for Google's Play Store (not applicable for libraries)
  version_code_old=$(get_version_code ${file})
  if [ -n "${version_code_old}" ] ; then
      padded_sem_ver=$(printf "%02d%02d%02d\n" ${version_name_new_array[0]} ${version_name_new_array[1]} ${version_name_new_array[2]})
      # Replace the last six digits with the new padded semantic version
      version_code_new=${version_code_old::${#version_code_old}-6}${padded_sem_ver}
      sed2 "s/versionCode = ${version_code_old}/versionCode = ${version_code_new}/" ${file}
  fi

  git_commit_files="${git_commit_files} ${file}"
done

# Update README.md
sed2 "s/android-versioninfo:.*\"/android-versioninfo:${version_name_new}\"/" README.md
git_commit_files="${git_commit_files} README.md"

# Create a commit with appropriate tag
git_commit_message="Release version ${version_name_new}"
safe git commit --signoff ${git_commit_files} -m "${git_commit_message}"
safe git tag -f "release/${version_name_new}"
